{
  "name": "shahn-sales-server",
  "version": "1.0.0",
  "type": "module",
  "main": "src/index.js",
  "scripts": {
    "dev": "node --watch src/index.js",
    "start": "node src/index.js"
  },
  "dependencies": {
    "bcryptjs": "^2.4.3",
    "cors": "^2.8.5",
    "dotenv": "^16.4.5",
    "express": "^4.19.2",
    "jsonwebtoken": "^9.0.2",
    "mongoose": "^8.5.2",
    "morgan": "^1.10.0"
  }
}
PORT=4000
MONGODB_URI=mongodb://localhost:27017/shahn_sales
JWT_SECRET=please_change_me
import 'dotenv/config';
import express from 'express';
import cors from 'cors';
import morgan from 'morgan';
import mongoose from 'mongoose';
import authRoutes from './routes/auth.js';
import productRoutes from './routes/products.js';
import saleRoutes from './routes/sales.js';

const app = express();
app.use(cors());
app.use(express.json());
app.use(morgan('dev'));

const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/shahn_sales';
const PORT = process.env.PORT || 4000;

mongoose.connect(MONGODB_URI).then(()=>{
  console.log('âœ… MongoDB connected');
}).catch(err=>{
  console.error('MongoDB error', err);
  process.exit(1);
});

app.get('/', (req,res)=>res.json({name:'Shahn Sales API', status:'ok'}));
app.use('/api/auth', authRoutes);
app.use('/api/products', saleRoutes.guard, productRoutes);
app.use('/api/sales', saleRoutes.guard, saleRoutes.router);

app.use((err, req, res, next)=>{
  console.error('Error:', err);
  res.status(err.status || 500).json({message: err.message || 'Server error'});
});

app.listen(PORT, ()=> console.log(`ðŸš€ API on http://localhost:${PORT}`));
import mongoose from 'mongoose';

const userSchema = new mongoose.Schema({
  name: {type:String, required:true},
  email: {type:String, required:true, unique:true, lowercase:true},
  passwordHash: {type:String, required:true},
  role: {type:String, enum:['admin','user'], default:'admin'}
}, {timestamps:true});

export default mongoose.model('User', userSchema);
import mongoose from 'mongoose';

const saleSchema = new mongoose.Schema({
  product: { type: mongoose.Schema.Types.ObjectId, ref: 'Product', required: true },
  quantity: { type:Number, required:true, min:1 },
  total: { type:Number, required:true, min:0 },
  note: { type:String },
  date: { type: Date, default: Date.now }
}, {timestamps:true});

export default mongoose.model('Sale', saleSchema);
import { Router } from 'express';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import User from '../models/User.js';

const router = Router();
const sign = (user)=> jwt.sign(
  {id:user._id, role:user.role, name:user.name},
  process.env.JWT_SECRET || 'devsecret',
  {expiresIn:'7d'}
);

// Register (first user becomes admin)
router.post('/register', async (req,res,next)=>{
  try{
    const {name, email, password} = req.body;
    if(!name || !email || !password) return res.status(400).json({message:'Missing fields'});
    const exists = await User.findOne({email});
    if(exists) return res.status(409).json({message:'Email already registered'});
    const hash = await bcrypt.hash(password, 10);
    const isFirst = (await User.countDocuments()) === 0;
    const user = await User.create({name, email, passwordHash: hash, role: isFirst?'admin':'user'});
    res.json({token: sign(user), user:{id:user._id, name:user.name, email:user.email, role:user.role}});
  }catch(e){ next(e); }
});

// Login
router.post('/login', async (req,res,next)=>{
  try{
    const {email, password} = req.body;
    const user = await User.findOne({email});
    if(!user) return res.status(401).json({message:'Invalid credentials'});
    const ok = await bcrypt.compare(password, user.passwordHash);
    if(!ok) return res.status(401).json({message:'Invalid credentials'});
    res.json({token: sign(user), user:{id:user._id, name:user.name, email:user.email, role:user.role}});
  }catch(e){ next(e); }
});

export default router;
import { Router } from 'express';
import Product from '../models/Product.js';

const router = Router();

router.get('/', async (req,res,next)=>{
  try{
    const items = await Product.find().sort({createdAt:-1}).limit(1000);
    res.json(items);
  }catch(e){ next(e); }
});

router.post('/', async (req,res,next)=>{
  try{
    const item = await Product.create(req.body);
    res.status(201).json(item);
  }catch(e){ next(e); }
});

router.get('/:id', async (req,res,next)=>{
  try{
    const item = await Product.findById(req.params.id);
    if(!item) return res.status(404).json({message:'Not found'});
    res.json(item);
  }catch(e){ next(e); }
});

router.put('/:id', async (req,res,next)=>{
  try{
    const item = await Product.findByIdAndUpdate(req.params.id, req.body, {new:true});
    if(!item) return res.status(404).json({message:'Not found'});
    res.json(item);
  }catch(e){ next(e); }
});

router.delete('/:id', async (req,res,next)=>{
  try{
    const item = await Product.findByIdAndDelete(req.params.id);
    if(!item) return res.status(404).json({message:'Not found'});
    res.json({ok:true});
  }catch(e){ next(e); }
});

export default router;
import { Router } from 'express';
import jwt from 'jsonwebtoken';
import Sale from '../models/Sale.js';

export const guard = (req,res,next)=>{
  const auth = req.headers.authorization || '';
  const token = auth.startsWith('Bearer ')? auth.slice(7): null;
  try{
    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'devsecret');
    req.user = decoded;
    next();
  }catch(e){
    return res.status(401).json({message:'Unauthorized'});
  }
};

const router = Router();

router.get('/', async (req,res,next)=>{
  try{
    const {from, to} = req.query;
    const q = {};
    if(from || to){
      q.date = {};
      if(from) q.date.$gte = new Date(from);
      if(to) q.date.$lte = new Date(to);
    }
    const sales = await Sale.find(q).populate('product').sort({createdAt:-1}).limit(500);
    res.json(sales);
  }catch(e){ next(e); }
});

router.post('/', async (req,res,next)=>{
  try{
    const sale = await Sale.create(req.body);
    res.status(201).json(sale);
  }catch(e){ next(e); }
});

router.get('/:id', async (req,res,next)=>{
  try{
    const sale = await Sale.findById(req.params.id).populate('product');
    if(!sale) return res.status(404).json({message:'Not found'});
    res.json(sale);
  }catch(e){ next(e); }
});

router.put('/:id', async (req,res,next)=>{
  try{
    const sale = await Sale.findByIdAndUpdate(req.params.id, req.body, {new:true});
    if(!sale) return res.status(404).json({message:'Not found'});
    res.json(sale);
  }catch(e){ next(e); }
});

router.delete('/:id', async (req,res,next)=>{
  try{
    const sale = await Sale.findByIdAndDelete(req.params.id);
    if(!sale) return res.status(404).json({message:'Not found'});
    res.json({ok:true});
  }catch(e){ next(e); }
});

export default { router, guard };
